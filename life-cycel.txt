life cycle



onBeforeMount(async () => {
	  // Fetch data from an API before the component is mounted  
})

onMounted(() => {
  // Update component state or perform other logic with the fetched data
});
  mounted() {
    console.log('Component is mounted');
    // Access DOM elements or initialize data here
  }


onUnmounted(() => {
	// Perform cleanup tasks here
})


watch(
  () => value,
  (newValue, oldValue) => {
    // Custom logic to execute when 'value' changes
  }
);

// search with query params
watch(
  () => useRoute().fullPath,
  () => getData()
);


watchEffect(() => {
  // Reactive code to execute
});

const myComputedProperty = computed(() => {
  // Computed logic here
  return // Return the computed value
});


v-model="inputComputed"
const inputComputed = computed({
  get: () => input.value,
  set: (val) => emit("update:input", val),
});


async someAsyncFunction() {
  // Do something before the next DOM update
  await nextTick();
  // Do something after the next DOM update
}
    onMounted(async () => {
      await nextTick();
	// ….
    });


async someAsyncFunction() {
  // Do something before the next DOM update
  await this.$nextTick();
  // Do something after the next DOM update
}
  async mounted() {
    await this.$nextTick();
	// …..
  },
